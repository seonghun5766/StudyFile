Git이란?

Git이란 Source 관리를 위한 분산 버전 관리 시스템으로써, 배포후 major 버그를 발생시 빠르게 rollback을 하거나 수정된 코드만을 파악하여, 버그를 빠르게 찾거나, 
한 프로젝트의 코드를 여러 사람이 함께 작업 할 수 있도록 도와주는 등 사용하면 많은 이점을 가지고 있다.


Git의 원리

로컬 저장소는 git이 관리하는 세 그루의 나무로 구성되어 있는데, 첫번째 나무인 작업 디렉토리(Working directory)는 실제 파일들로 이루어져있고, 
두번째 나무인 인덱스(Index)는 준비 영역(staging area)의 역할을 하며, 마지막 나무인 HEAD는 최종 확정본(commit)을 나타낸다.
변경된 파일은 git add 명령어로 인덱스에 추가한다. 이것이 바로 git의 기본 작업 흐름에서 첫 단계이고,
실제로 변경 내용을 확정하려면 git commit -m "설명" 명령을 내려야 한다. 그러면 변경된 파일이 HEAD에 반영된다.
그 후, git push origin (branch명)을 통해 원격 서버로 파일을 업로드 한다.



-- 초기 작업 --
git config --global user.name "" 	- 초기 작성자 이름 등록
git config --global user.email "" 	- 초기 작성자 이메일 등록
git config --list			- 등록된 사용자 정보 보기

git remote add origin 연동할 깃 주소	- 깃과 깃허브를 연동
git remote -v				- 연동이 잘 되었는지 확인



-- 업로드 핵심 --
git init					- git을 초기화한다 (맨 처음에 업로드할 때 사용)
git add . 					- git에 추가할 파일 더하기
git commit -m "~"				- git add 후 업로드 할 깃에 메시지 입력(히스토리 만들기)
git push origin master(주의) / branch명 		- git을 master에 등록한다


git clone 주소 : 원격 저장소에 저장된 git 가져오기
git checkout -b 브렌치이름	- Github에서 내 브렌치(branch)만들기
git branch		- 브랜치 이동

git branch -d		- 브랜치 삭제



git status 		- 등록한 git폴더 안에 업로드된 파일목록 출력
git commit 		- git을 편집하기 위한 vi모드로 진입
git commit i 		- 입력 시작
esc 			- 입력 종료
git commit i -> wq 	- 내용 입력 후 저장 후 종료
git log -		- 현재 상태의 해쉬 코드 출력 (reset을 하기위한 코드값)


.gitignore 파일 생성  	- git에 업로드하지 않을 파일 등록




pull과 fetch의 차이

pull과 fetch의 가장 큰 차이는 merge를 하냐 하지 않느냐의 차이이다. fetch의 경우 코드를 받아온후 즉시 코드를 반영하지 않아, 작업한 코드가 충돌이 일어날경우에 안전하지만, 
pull은 코드를 받아온후 즉시 merge하여 코드를 반영하기 때문에 충돌이 일어날 수 있다. 이 경우 충돌을 해결해주고 다시 commit 하면된다.



