운영체제(Operating System)

 - 컴퓨터 시스템을 사용하는데 편리함을 제공하고 사용자에게 편리함과 함께 위험에 효과적으로 대처할 수 있는 환경을 제공하는 프로그램


운영체제의 목적

 - 처리능력(Throughput) 향상
 - 반환시간(Turn-around time) 감소
 - 사용 가능도(Availability) 향상
 - 신뢰도(Reliability) 향상


운영체제의 역할

 - 부팅 		    	: 	부트스트랩(Bootstrap)의 약자, 컴퓨터 시스템을 시동하거나 재시동 하는 작업
 - 저장 매체 관리 	    	: 	하드디스크와 플로피디스크의 데이터를 저장 및 읽기, 쓰기 작업하는 과정의 관리
 - 사용자 인터페이스 제공  	: 	운영체제를 제어하기 위한 사용자와 운영체제 사이의 대화(통신)를 제공하는 역할
 - 컴퓨터 자원 관리 	    	: 	운영체제의 중심을 이루는 슈퍼바이저 또는 커널이 수행, CPU제어
 - 파일 관리 	    	: 	복사, 백업, 삭제, 이름수정
 - 프로세스 관리        	: 	다양한 작업을 동시에 처리할 때 운용하는 기법(시분할 시스템, 다중 프로그래밍, 다중처리, 분산처리)


프로세스(Process)

 - CPU에 의해서 처리되는 최소 작업 단위


프로세스의 상태

 - 준비(Ready)상태		:	프로세스가 CPU를 할당 받기 위하여 기다리는 상태
 - 실행(Run)상태		:	프로세스가 CPU를 할당 받아서 작업이 진행 중인 상태
 - 대기(Wait)상태		:	프로세스가 실행 중에 입출력 처리가 필요하면 CPU를 비워주고 대기하고 있는 상태
 - 교착(Deadlock)상태	:	프로세스가 서로 엉켜서 수행이 불가능한 상태로 정지되는 상태
 - 완료(Complete)상태	:	프로세스가 CPU를 할당 받아 주어진 시간 동안 수행을 끝낸 상태


스레드(Thread)

 - 프로세스 내에서 프로그램을 실행하는 작업 단위(단일 스레드, 다중 스레드)


스레드의 장점

 - 단일 프로세스를 여러 개의 스레드로 생성하여 병행성을 증진시킬 수 있다.
 - 하드웨어와 운영체제의 성능과 응용프로그램의 처리율을 향상시킬 수 있다.
 - 실행환경을 공유시켜서 기억장소의 낭비가 줄어든다.
 - 프로세스간의 통신 속도가 향상된다.


스케줄링(Scheduling)

 - 프로세스가 작업을 수행하는데 필요한 CPU공간을 할당 받기 위한 작업
 - 비선점 스케줄링 	:  프로세스가 자원을 할당 받았을 경우, 자원을 스스로 반납할 때까지 계속 그 자원을 사용(FIFO 스케줄링, SJF 스케줄링)
 - 선점 스케줄링	:  시분할 시스템에서 더 높은 우선 순위 프로세스가 발생 되었음을 알았을 때, 현 실행 프로세스로부터 강제로 CPU를 회수 (RR 스케줄링, SRT 스케줄링)


FIFO(First In First Out) 스케줄링

 - 준비상태 큐에 도착하는 순서대로 차례대로 CPU를 할당하는 기법
 - 먼저 도착한 작업이 먼저 처리되는 공정성
 - 짧은 작업이 긴 작업을 기다리는 불편함


SJF(Shortest Job First, 최단시간 작업 우선) 스케줄링

 - 준비상태 큐에서 기다리는 프로세스 중에 실행시간이 가장 짧은 프로세스에게 먼저 CPU를 할당하는 기법
 - 가장 적은 평균대기시간을 제공하는 최적 알고리즘 기법
 - 긴 작업시간을 갖는 프로세스는 짧은 작업시간을 갖는 프로세스에게 우선순위에서 계속 밀리면 무한 연기될 수 있다.


RR(Round Robin) 스케줄링
 - FIFO 기법을 선점 형태로 변형한 기법
 - 시분할에 의한 동작을 하므로 할당하는 시간의 크기에 따라 CPU를 사용하는 효과에 대한 영향이 크다.
 - 준비상태 큐에 도착하는 순서의 차례대로 CPU를 할당 받아 실행하지만 할당된 일정시간 동안 실행을 완료하지 못 했을
   경우, 다음 순위의 프로세스에게 CPU를 비워주고 준비상태 큐의 맨 뒤로 들어간다.


SRT(Shortest Remaining Time) 스케줄링
 - 비선점 SJF기법을 선점 형태로 변형한 기법이다.
 - 현재 실행중인 프로세스의 남은 실행시간과 준비상태 큐에 새로 들어온 프로세스의 실행시간을 비교하여 더 짧은
   시행시간을 갖는 프로세스에게 CPU를 할당하는 기법이다.


교착상태란

 - 두 개 이상의 프로세스가 서로 자원을 점유한 상태에서 자기에게 필요한 또 다른 자원을 서로 다른 프로세스가 갖고 있는
   자원을 요구하며 무한정 기다리는 상태를 의미한다.


교착상태의 발생 조건

 - 상호배제 	:  한 번에 하나의 프로세스만 해당자원을 사용할 수 있어야 한다.
 - 점유와 	:  대기 :최소한 하나의 자원을 가지고 있으면서 다른 프로세스에 할당된 자원을 갖기 위해서 대기하는 프로세스가 있어야 한다.
 - 비선점 	:  다른 프로세스에 할당된 자원은 강제로 뺏을 수 없다.
 - 환형대기 	:  교착상태 발생 때 반드시 요구되는 조건이다. 공유자원과 공유자원을 사용하기 위한 프로세스들이 원형으로 구성되어
		   있고, 자기에게 할당된 자원을 가지면서 앞 혹은 뒤의 프로세스가 가진 자원을 요청하면서 대기 한다.


교착상태 예방기법

 - 상호배제(Mutual Exclusion) 부정
	상호배제는 자원을 공유하지 않는 조건을 전제로 한다.
	상호배제 부정은 한 번에 여러 개의 프로세스가 공유자원을 사용할 수 있도록 한다.

 - 점유와 대기(Hold and Wait) 부정
	프로세스 대기를 없애려면 프로세스가 실행되기 전에 필요한 모든 자원을 할당한다.
	프로세스가 자원을 점유하지 않은 상태에서만 자원을 요청할 수 있도록 한다.

 - 비선점(Non-Preemption) 부정
	비선점을 부정하는 전제 조건은 이미 할당된 자원에 대해서 선점권을 갖지 않는다.
	프로세스가 어떤 다른 자원을 요구할 때, 요청한 자원을 사용 가능한지 검사하여, 사용 가능하다면 점유하고 있는 자원을
	반납하고 요구한 자원을 사용하기 위하여 대기한다.

 - 환형대기(Circular Wait) 부정
	모든 자원에 대하여 일련의 순서대로 고유번호를 부여한다.
	각 프로세스는 현재 점유 중인 자원의 고유번호를 기준으로 앞이나 뒤 어느 한 방향으로만 자원을 요구 한다.