JSP의 기본 문법

지시자(<%@  %>) : 페이지 전반에 적용되는 설정, 다른 JSP파일 포함, 다른 라이브러리 불러오기

선언부(<%!  %>) : 멤버 필드나 멤버 메서드를 선언하거나 정의하는 영역

스크립틀릿(<%  %>) : 메인에 해당하는 자바 코드를 작성하는 함수영역, service()

표현식(<%=  %>) : 스크립틀릿 out.print()을 이용해 HTML문서에 자바 값을 출력하는 구문



JSP 내장 객체(attribute를 저장하고 불러올 수 있는 객체)

 - pageContext : 현재 페이지에서만 유효함, 페이지가 변경되면 새로운 내장객체가 생성되므로 attribute가 사라짐
 - request : 현재 요청에서만 유효함, 기본적으로 pageContext와 비슷하지만 forward상황이라면 조금 더 긴 시간 유지됨
 - session : 현재 세션에서만 유효함, 클라이언트가 브라우저 종료/로그아웃 하기전까지 유지됨
 - application : 현재 서버가 지속중인 경우에 유효함, 서버를 종료하거나 재시작하면 사라짐



GET, POST 요청

GET 방식

 - 주소창을 통해서 파라미터를 전달한다
 - POST에 비해서 빠르다
 - 글자로 표현가능한 데이터만 전달할 수 있다(파일 전송 불가)
 - 글자수에 대한 제한이 있는 경우도 있다(최근 환경에서는 사실상 길이 제한은 거의 없음)
 - 용량 제한은 어느정도 있다
 - 자바스크립트를 통한 주소변경(location.href = 'http://egoing.net';), <a>태그를 통한 주소변경은 모둔 GET방식의 요청이다

POST 방식

 - 요청헤더의 form-data 영역에 파라미터를 담아서 전송한다(주소창을 통하지 않는다)
 - 비밀번호와 같이 보안상 민감한 데이터를 다룰때에는 글자로 구성된 데이터라고 해도, POST를 사용한다
 - 주소창에 노출이 되지 않을 뿐, 패킷을 열어보면 패스워드도 식별가능하다 (암호화로 보완 가능, HTTPS)
 - 데이터 자체가 암호화되는 것이 아니다 개발자도구로 들어가서 보면 다 확인할 수 있다
 - 파일 전송 가능(추가적인 속성을 작성해야 함)



DAO / DTO / VO

DAO(Data Access Object)는 데이터베이스의 data에 접근하기 위한 객체로서,
DataBase에 접근 하기 위한 로직 & 비지니스 로직을 분리하기 위해 사용한다.

DTO(Data Transfer Object)는 계층 간 데이터 교환을 하기 위해 사용하는 객체로서, 
로직을 가지지 않는 순수한 데이터 객체(getter & setter 만 가진 클래스)입니다.

VO(Value Object)는 값 오브젝트로 값을 위해 쓰이며, read-Only 특징(사용하는 도중에 변경 불가능하며 오직 읽기만 가능)을 가진다.
DTO와 유사하지만 DTO는 setter를 가지고 있어 값이 변할 수 있다.

ex) : 자신의 브라우저에서 데이터를 입력하여 form에 있는 데이터를 DTO에 넣어서 전송하면
해당 DTO를 받은 서버가 DAO를 이용하여 데이터베이스로 데이터를 집어넣는다.



액션태그

객체 생성(기본생성자) : <jsp:useBean id="dto2" class="day02.Ex01DTO" />

<jsp:setProperty property="*" name="dto2" />					
클래스가 가지는 setter와 input의 name이 일치한다면 파라미터를 받아서 객체에 대입
		
Beans 클래스의 작성 규칙

1. private 멤버 변수
2. public 메서드
3. 자동으로 생성되는 생성자나, 혹은 직접 작성한 기본 생성자
4. 생성자는 오버로딩을 해서 여러개를 작성할 수 있지만 기본 생성자는 무조건 있어야 한다.
5. input태그의 name 이름과 beans의 멤버 변수 이름은 가급적 맞추도록 한다.



redirect / forward

redirect : 서버가 클라이언트에게 새로운 주소를 알려주고, 클라이언트가 전달받은 주소로 새로운 요청을 시도
	   서버 내 페이지는 물론, 서버 외부의 다른 주소도 요청 가능
	   클라이언트가 새로운 요청을 시도하므로, 주소창이 변경됨

forward : 서버가 가지고 있는 다른 문서로 응답을 바꿔치기함
	  요청을 분석하여 다른 응답이 필요한 경우, 서버가 가진 문서중 하나로 응답을 변경
	  클라이언트가 A를 요청한 경우, 서버가 임의로 B를 응답으로 보내주기 때문에 주소창은 A가 떠있음
	  페이지를 변경해도 request가 유지되므로, 파라미터를 다른페이지에서도 참조할 수 있다




JDBD / DBCP

JDBC
java database connectivity의 약자로, DB에 접급하기 위한 라이브러리

DBCP
WAS 실행 시 미리 일정량의 DB Connection 객체를 생성하고 Pool 이라는 공간에 저장해 둔다.
그리고 DB 연결 요청이 있으면, 이 Pool 이라는 공간에서 Connection 객체를 가져다 쓰고 반환 하게 된다.

maxActive : 동시에 사용할 수 있는 최대 커넥션 개수
maxIdle : Connection Pool에 반납할 때 최대로 유지될 수 있는 커넥션 개수
minIdle : 최소한으로 유지할 커넥션 개수
initialSize : 최소로 getConnection() Method를 통해 커넥션 풀에 채워 넣을 커넥션 개수



Statement / PreparedStatement

 - SQL 을 실행할 수 있는 객체입니다.
 - Statement         : 1. 단일로 사용될 때 빠른 속도를 지닌다.
	               2. 쿼리에 인자를 부여할 수 없다.
                       3. 매번 컴파일을 수행해야 한다.

 - PreparedStatement : 1. 쿼리에 인자를 부여할 수 있습니다.
		       2. 처음 프리컴파일 된 후, 이후에는 컴파일을 수행하지 않습니다.
		       3. 여러번 수행될 때 빠른 속도를 지닙니다.



EL / JSTL

 - EL 표현식 -> 출력하기 위한 방식이다.
 - EL 태그는 파라미터의 형변환을 알아서 해주고, null값을 출력하지 않는다.
 - 이름 : ${param.name }   ${param.파라미터 명}
 - 나이 : ${param.age }  자동으로 파라미터의 자료형을 맞춰준다 
 - 나이 + 12 : ${param.age + 12 }
 - EL은 멤버 변수를 바로 접근 가능한데, getter가 있어서 가능한 것 
	${list.get(1).name }
	${list[1].name }


JSTL(JSP Standard Tag Library)

 - JSP는 원래 자바로 작동할 내용을 스크립트 형식의 언어로 만들었기 때문에 임의로 태그를 만들어서 사용할 수 있다
 - 여러 개발자들이 필요에 따라 각자의 태그를 만들어서 사용하다보니, 표준이 없어 여러 문제가 발생했다
 - 여러 태그들을 모아서, 표준을 맞추고, 묶어서 라이브러리화 시킨게 현재의 JSTL이다
 - core : 객체 생성 및 삭제(attribute), 제어문(if, for), web(url, redirect)
 - format : 날짜 및 시간, 다국화 표현에 대해 서식을 지정할 수 있는 태그
 - functions : 데이터를 잘라내거나, 합치거나, 기본적인 문자열 처리를 수행하는 함수 모음
 - sql : 자바코드를 통하지 않고서도, JDBC에 접근 및 DBCP를 활용할 수 있는 형식의 태그 지원


JSTL:core

 - c:set : 객체를 생성하거나, 객체의 속성을 지정한다(객체는 attribute로 등록된다)
 - c:if : 조건을 판단하여, 내부 코드를 실행한다
 - c:forEach : 컬렉션을 대상으로 반복문을 수행하거나, 횟수를 전달받아서 반복문을 수행한다
 - c:redirect : 클라이언트에게 리다이렉트 응답을 보낸다
 - c:remove : 지정한 scope의 attribute를 제거한다
 - c:choose : switch ~ case 처럼 여러 조건에 대한 분기를 설정한다. 하위로 c:when, c:otherwise가 있다