라이브러리(Library)

 - 여러 유용한기능들을 모아놓은 클래스들의 집합


프레임워크(Framework)

 - 프레임워크는 뼈대나 기반구조를 뜻하고, 제어의 역전 개념이 적용된 대표적인 기술입니다.  
 - 소프트웨어의 특정 문제를 해결하기 위해 상호 협력하는 클래스와 인터페이스의 집합
 - 완성된 어플리케이션이 아닌 프로그래머가 완성시키는 작업을 해야 한다.


프레임워크와 라이브러리의 차이점

 - 라이브러리와 프레임워크의 차이는 제어 흐름에 대한 주도성이 누구에게 있는지이다.
 - 프레임워크는 전체적인 흐름을 스스로가 쥐고 있으며 사용자는 그 안에서 필요한 코드를 짜 넣으면 된다. 
 - 라이브러리는 사용자가 전체적인 흐름을 만들며 라이브러리를 가져다 쓰는 것이라고 할 수 있다.


웹 서버(Web Server) / 웹 어플리케이션 서버(Web Application Server)

 - 웹서버는 image, html, css, javascript등 컴퓨터에 저장되어 있는 파일들인 정적인 데이터 요청을 처리한다.(Apache Server, NginX)
 - 웹 어플리케이션 서버는 데이터베이스, 서버 내 로직 등 동적인 데이터 요청을 처리한다.(Apache Tomcat)
 - 웹 서버와 웹 어플리케이션 서버 기능을 분리하여 서버 부하를 방지
 - 물리적으로 서로 분리하거나 SSL에 대한 암복호화에 Web Server를 사용하여 보안을 강화


JAR(Java Archive) / WAR(Web Application Archive)

 - JAVA의 jar 툴을 이용해 생성된 파일이며 애플리케이션을 쉽게 배포하고 동작시킬 수 있도록 관련 파일을 패키징해준다.
 - JAR는 자바 프로젝트를 압축한 파일로 자바 리소스, 속성파일, 라이브버리 등을 포함
 - WAR는 servlet / jsp 컨테이너에 배치할 수 있는 웹어플리케이션 압축 파일로 웹 관련 자원만을 포함


가상 머신(Virtual Machine, VM)

 - 물리적 하드웨어 시스템에 구축되어 자체 CPU, 메모리, 네트워크 인터페이스 및 스토리지를 갖추고 가상 컴퓨터 시스템으로 작동하는 가상 환경
 - 하이퍼바이저라 불리는 소프트웨어는 하드웨어에서 가상 머신의 리소스를 분리하고 적절히 프로비저닝하여 VM에서 사용할 수 있도록 한다.


로드 밸런싱(load balancing)

 - 컴퓨터 네트워크 기술의 일종으로 둘 혹은 셋이상의 중앙처리장치 혹은 저장장치와 같은 컴퓨터 자원들에게 작업을 나누는 것을 의미
 - 대표적인 로드 밸런싱 알고리즘인 라운도 로빈 방식은 클라이언트로부터 받은 요청을 로드밸런싱 대상 서버에 순서대로 할당하여 균등하게 분산이 이루어지게 하는 방식


REST(Representational State Transfer) API
 
 - RESTful API 라고도 부르며, REST 아키텍처의 제약 조건을 준수하는 애플리케이션 프로그래밍 인터페이스를 뜻한다.
 - REST API의 대표적인 설계 항목은 URI가 정보의 자원을 표현하고 자원에 대한 행위는 HTTP Method(GET, POST, PUT, DELETE)로 표현해야 한다.


리펙토링(Refactoring)

 - 소프트웨어를 보다 쉽게 이해할 수 있게 하고, 동작변화 없이 내부 구조를 변경하는 것
 - 기능 추가, 버그 수정 및 코드 검토 시 중복이나 종속성을 제거하여 코드를 단순하게 해야 한다.


직렬화(Serialization) 

 - 데이터 구조나 오브젝트 상태를 다른 컴퓨터 환경에 저장하고 나중에 재구성할 수 있는 포맷으로 변환하는 과정
 - 반대로, 일련의 바이트로부터 데이터 구조를 추출하는 것은 역직렬화(Deserialization)이라고 한다.
 

CI(Cintinuous Integration)

 - CI는 개발자를 위한 자동화 프로세스인 지속적인 통합을 의미 
 - 새로운 코드의 변경 사항이 정기적으로 빌드 및 테스트되어 공유 리포지토리에 통합되므로 
   여러 명의 개발자가 동시에 애플리케이션 개발과 관련된 코드 작업을 할 경우 서로 충돌할 수 있는 문제 해결 가능


CD(Continuous Deployment)

 - CD는 지속적인 배포(Continuous Deployment)를 의미
 - 수동적인 프로세스로 인한 프로세스 과부하 문제를 해결 및 파이프라인의 다음 단계를 자동화


데브옵스(DevOps)

 - 신속한 애플리케이션과 서비스를 고객에게 제공하기 위해 Dev와 Ops 간에 나뉘어진 장벽을 깨고 서로간의 협업을 중시하는 것 
 - 기존 소프트웨어 프로세스들 간의 관계(개발, 운영, 품질, 보안 등)를 효율적인 자동화로 개선시키려는 방식 및 도구의 조합


도커(Docker)

 - Docker는 커널의 기능을 사용하여 프로세스를 분리함으로써 독립적으로 실행될 수 있도록 한다.
 - Docker의 컨테이너 툴은 이미지 기반 배포 모델을 통해 애플리케이션(또는 앱을 구성하는 결합된 프로세스) 배포를 자동화한다.
 - 여러 프로세스와 애플리케이션을 서로 개별적으로 실행하여 인프라를 더 효과적으로 활용하고 개별 시스템을 사용할 때와 동일한 보안을 유지할 수 있다.


파비콘(Favicon)

 - 인터넷 웹 브라우저의 주소창에 표시되는 웹사이트나 웹페이지를 대표하는 아이콘


JUnit

 - 자바 프로그래밍 언어용 유닛 테스트 프레임워크