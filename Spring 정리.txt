web.xml

 - WAS가 처음 구동될 때 web.xml을 읽어 웹 애플리케이션 설정을 구성한다.
 - 스프링의 환경설정 파일인 root-context.xml을 가장 먼저 참조한다.
 - 그 다음 servlet-context.xml을 참조한다
 - DispatcherServlet을 등록해주면서 스프링 설정 파일을 지정한다.
 - DispatcherServlet은 초기화 과정에서 지정된 설정 파일을 이용해 스프링 컨테이너를 초기화시킨다.



servlet-context.xml 

 - web.xml에서 DispatcherServlet 등록 시 설정한 파일이다.
 - 설정 파일을 이용해서 스프링 컨테이너를 초기화시킨다.



root-context.xml

 - 스프링 프로젝트 생성 시 root-context.xml은 특별한 설정이 없다.
 - 공통적으로 사용하려는 Bean을 추가하여 사용하면 된다.



스프링의 요청 처리 방식

 - 클라이언트의 요청 -> web.xml에 있는 DispatcherServlet이 handlerMapping을 통해 알맞은 Controller를 매핑
   -> Contorller는 service와 model을 통해 클라이언트의 요청을 처리하고 결과를 출력할 view의 이름을 리턴
   -> ViewResolver를 통해 알맞은 매핑되는 view객체를 리턴
   -> view에서 처리된 결과를 DispatcherServlet으로 전달
   -> 최종 결과를 클라이언트에게 전달



IoC(Inversion of Control)

 - 스프링에서 Java 객체를 new로 생성하여 개발자가 관리 하는 것이 아닌 Spring Container에 모두 맡긴다.
 - 개발자에서 스프링으로 제어의 객체 관리의 권한이 넘어 갔음을 제어의 역전이라고 한다.



DI(Dependency Injection)

 - 의존성 주입은 하나의 객체가 다른 객체의 의존성을 제공하는 테크닉이다.
 - 의존성 주입의 의도는 객체의 생성과 사용의 관심을 분리하는 것으로 이는 가독성과 코드 재사용을 높혀준다
 - 코드 테스트에 용이하며, 코드를 확장하거나 변경 할 때 영향을 최소화 한다
 - 순환참조를 막을 수 있다.



AOP(Aspect Oriented Programming)

 - 관점지향 프로그램으로 Web Layer, Business Layer, Data Layer로 정의한다.
 - Web Layer : REST API를 제공하며, Client 중심의 로직 적용
 - Business Layer : 내부 정책에 따른 logic을 개발하며, 주로 해당 부분을 개발
 - Data Layer : 데이터 베이스 및 외부와의 연동을 처리



어노테이션(Annotation)

 - @Contoller : View를 제공하는 controller로 설정
 - @Autowired : 
 - @RestController : REST API를 제공하는 controller로 설정
 - @RequestMapping : URL 주소를 맵핑
 - @GetMapping : Http GetMethod URL 주소 맵핑
 - @PostMapping : Http PostMethod URL 주소 맵핑
 - @PutMapping : Http PutMethod URL 주소 맵핑
 - @DeleteMapping : URL Query Parameter 맵핑
 - @RequestParam : URL Query Paramter 맵핑
 - @RequestBody : HttpBody를 Parsing 맵핑



RequestParam / PathVaraible

 - 클라이언트가 Controller에 파라미터를 전달하는 2가지 방식
 - http://127.0.0.1?index=1&page=2 -> 파라메터의 값과 이름을 전달하는 방식으로 게시판 등에서 페이지 및 검색 정보를 전달하는 방식을 사용할 때 사용(RequestParam)
 - http://127.0.0.1/index/1 	   -> 주로 Rest api에서 값을 호출할 때 사용(PathVariable)



ExceptionHanlder / ControllerAdvice

 - @ExceptionHandler같은 경우는 @Controller, @RestController가 적용된 Bean내에서 발생하는 예외를 잡아서 하나의 메서드에서 처리해주는 기능을 한다.
 - @RestController
   public class MyRestController {
    	...
    	...
    	@ExceptionHandler(NullPointerException.class)
    	public Object nullex(Exception e) {
        	System.err.println(e.getClass());
        	return "myService";
    	}
   }
   @ExceptionHandler라는 어노테이션을 쓰고 인자로 캐치하고 싶은 예외클래스를 등록해주면 된다.
   @ExceptionHandler({ Exception1.class, Exception2.class}) 이런식으로 두 개 이상 등록도 가능


 - @ControllerAdvice는 모든 @Controller 즉, 전역에서 발생할 수 있는 예외를 잡아 처리해주는 annotation이다.
 - @RestControllerAdvice
   public class MyAdvice {
 	@ExceptionHandler(CustomException.class)
       	public String custom() {
      		return "hello custom";
       	}
   }
 - @RestControllerAdvice는 @RestController에서 발생한 Exception만 캐치하고, @ControllerAdvice는 @Controller에서 발생한 Exception만 캐치한다.



pom.xml 라이브러리

 - xerces : XML 경로 상에 한글이 포함되어 예외를 발생시키지 않고 동작하게 하는 라이브러리
 - spring-jdbc : 스프링에서 DB접속을 지원하는 라이브러리
 - c3p0 : Connection Pool
 - ojdbc8 : 오라클데이터 베이스에 접근하기 위한 라이브러리
 - mybatis  : 영속성 프레임워크 / jdbcTemplate보다 DB에 접근을 쉽게 해주는 라이브러리
 - mybatis-spring : mybatis를 spring framework에 녹여내 좀 더 쉽게 사용하고자하는 연동 모듈
   -> SqlSessionFactoryBean과 SqlSession을 spring framework의 bean으로 등록
 - HikariCP : c3p0를 대체하는 역할(커넥션풀 유지)
 - spring-orm : 자바객체와 데이터베이스 테이블간의 맵핑처리